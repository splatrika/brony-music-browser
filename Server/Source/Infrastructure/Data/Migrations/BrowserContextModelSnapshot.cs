// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Splatrika.BronyMusicBrowser.Infrastructure.Data;

#nullable disable

namespace Splatrika.BronyMusicBrowser.Infrastructure.Data.Migrations
{
    [DbContext(typeof(BrowserContext))]
    partial class BrowserContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.Album", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cover")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Albums");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.AlbumArtist", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId", "ArtistId");

                    b.ToTable("AlbumArtists");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.AlbumSong", b =>
                {
                    b.Property<int>("AlbumId")
                        .HasColumnType("int");

                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.HasKey("AlbumId", "SongId");

                    b.ToTable("AlbumSongs");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.Artist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Artists");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.Character", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Icon")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.Song", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Cover")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.Property<string>("YouTubeId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.HasKey("Id");

                    b.ToTable("Songs");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongArtist", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("ArtistId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "ArtistId");

                    b.HasIndex("ArtistId");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("SongArtists");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongCharacter", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("CharacterId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("SongCharacters");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongGenre", b =>
                {
                    b.Property<int>("SongId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("SongId", "GenreId");

                    b.HasIndex("GenreId");

                    b.HasIndex("SongId")
                        .IsUnique();

                    b.ToTable("SongGenres");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.AlbumArtist", b =>
                {
                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.Album", null)
                        .WithMany("Artists")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.AlbumSong", b =>
                {
                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.Album", null)
                        .WithMany("Songs")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongArtist", b =>
                {
                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.Artist", "Artist")
                        .WithMany()
                        .HasForeignKey("ArtistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.Song", null)
                        .WithOne()
                        .HasForeignKey("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongArtist", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Artist");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongCharacter", b =>
                {
                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.Song", null)
                        .WithOne()
                        .HasForeignKey("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongCharacter", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongGenre", b =>
                {
                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Splatrika.BronyMusicBrowser.Core.Entities.Song", null)
                        .WithOne()
                        .HasForeignKey("Splatrika.BronyMusicBrowser.Core.Entities.SongJoins.SongGenre", "SongId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Splatrika.BronyMusicBrowser.Core.Entities.AlbumAggregate.Album", b =>
                {
                    b.Navigation("Artists");

                    b.Navigation("Songs");
                });
#pragma warning restore 612, 618
        }
    }
}
